doctype html
html(lang='en')
  head
    meta(charset='utf-8')   
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    meta(name='description', content='Online Checkers')
    meta(name='author', content='Rohit Lalchandani, Pranay Kumar, Anish Balaji, Brennen Nelson')

    title CalHacks Checkers

    link(href='css/bootstrap-hero.min.css', rel='stylesheet')
    link(href='css/checkers.css', rel='stylesheet')
    link(rel='stylesheet', type='text/css', href='css/sweetalert.css')
    link(rel='stylesheet' type='text/css' href='css/animate.min.css')
    link(rel='stylesheet' type='text/css' href='css/alertify.min.css')
    link(rel='stylesheet' type='text/css' href='css/themes/default.css')
    link(rel='stylesheet' type='text/css' href='css/please-wait.css')
    link(rel='stylesheet' type='text/css' href='css/spinkit.css')
    link(rel='stylesheet' type='text/css' href='css/barSpinner.css')

  body
    // Main container
    .container-fluid
      .row
        .col-md-6
          table#gameBoard(cellpadding='0', cellspacing='0')
        .col-md-6(id='messagesRow')
          .col-xs-1
          .col-xs-11
            .row
              .col-sm-12
                h4
                  span.glyphicon.glyphicon-pencil
                  &nbsp;&nbsp; Message Feed
            .row.scrollableTable
              .col-sm-12
                table.table.table-striped.messagesRow0
                  thead
                    tr
                      th User&nbsp;&nbsp;
                        span.glyphicon.glyphicon-user

                      th Message&nbsp;&nbsp;
                        span.glyphicon.glyphicon-comment     
                  tbody#messages

            br
           
            .row
              .col-sm-7
                input#m.form-control.messagesRow2(type='text', autofocus='', placeholder='Send a message') 
              .col-sm-3
                button#submitbtn.btn.btn-primary(type='submit') Send Message

            br

            .row
              .col-sm-6
                ul(class='nav nav-pills' role='tablist')
                  li(class='active' role="presentation")
                    a(href="#info" role="tab" data-toggle="tab") Game Information
                  li(role="presentation")
                    a(href="#rules" role="tab" data-toggle="tab" id="rulesTab") Rules
            
            br

            .tab-content
              div(class="tab-pane fade in active" id="info")
                .panel.panel-default
                  .panel-body
                    table.table.table-bordered
                      thead
                        tr
                          th 
                          th red
                          th blue
                          th white
                          th gold
                        tr
                          th Points
                          th#redPoints
                          th#bluePoints
                          th#whitePoints
                          th#goldPoints
                        tr
                          th Pieces
                          th#redPieces
                          th#bluePieces
                          th#whitePieces
                          th#goldPieces


                    h5#whosTurn
                    h5#whoYouAre
                    h5#allPoints
              div(class="tab-pane fade in" id="rules")
                .panel.panel-default.tabDiv(id="rulesDiv")
                  .panel-body
                    p
                      | Welcome to CheckersSquared! </br></br>
                      | You are probably wondering why you are here? We are also wondering the same thing. Well, now that we have you, we want to play a game... :) </br></br>
                      | In this game you will be be pitted against 3 other challengers in a battle of wits, skill, and strategy. </br></br>
                      | The rules are simple... kinda: </br></br>
                      | You are playing a game similar to checkers. The goal of the game is to capture everybody else's pieces. There are two kinds of pieces: king, and non-king. A non-king piece can move and capture forward, left, right and backward. Each player will start with 8 non-king pieces. A piece gets kinged by moving to the opposite end of the board. A king piece can move and capture in any direction. To end turn, press space bar. Additionally, each player starts with a bank of points. You gain points by capturing pieces and you lose points by moving a non-king piece backwards. These points will also determine the winner in the case of a stalemate, which results from 30 consecutive moves with no captures. That's about it! Feel free to smack talk your opponents, the more the better!


    script(src='https://cdn.socket.io/socket.io-1.2.0.js')
    script(src='js/sweetalert.min.js')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js')
    script(src='//code.jquery.com/ui/1.11.4/jquery-ui.js')
    script(src='js/logic.js')
    script(src='js/alertify.min.js')
    script(src='js/janimate.js')
    script(src='js/please-wait.js')
    script.

      var loading_screen = pleaseWait({
        logo: "images/logo.jpg",
        backgroundColor: '#2b3e50',
        loadingHtml: "<div class='spinner'></div>"
        //<div class='spinner'><div class='rect1'></div><div class='rect2'></div><div class='rect3'></div><div class='rect4'></div><div class='rect5'></div></div>"
      });

      $('#gameBoard').hide();
      $('#messagesRow').hide();

      setTimeout(function() { $('#gameBoard').show(); $('#gameBoard').jAnimate("bounceInUp"); }, 2000);
      setTimeout(function() { $('#messagesRow').show(); $('#messagesRow').jAnimate('fadeIn'); }, 2300);




      $('#rulesTab').on('click', function() {
        $('#rulesDiv').animate({ scrollTop:  $('#rulesDiv').scrollTop() + 220 }, 20000, "linear");
      });

      $('#rulesDiv').mouseenter(function() {
        $(this).stop();
      });

      setTimeout(function() { loading_screen.finish(); }, 2000);

    script.

      var board; // JS Object representing board
      var hasMoved = false; // If you have moved
      var player; // Which player you are
      var turn; // WHO turn it is
      var playerPoints;
      var selectedPiece; // JS Object of selected
      var src; // Coordinates of selected piece
      var hasSelectedPiece = false; // If a piece has been selected
      var socket = io(); // Create a new socket for this user
      var offsets = {"gold": 0, "white": 1, "blue": 2, "red": 3}; // offset for rotation amounts for each client
      var notifiedOfDeath = false;
      var selectedLink;
      
      // Recieving board from server
      socket.on('board', function(boardJSON) {
        board = JSON.parse(boardJSON);
        for (var a = 0; a < offsets[player]; a++) {
          board = rotateClockwise(board);
        }
        drawboard(board);
      });

      socket.on('disconnectError', function() {
        swal({
          title: "Oh no!",
          text: "Someone disconnected. Shame on them.",
          type: "error",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Join new lobby?",
          cancelButtonText: "I'm out yo",
          closeOnConfirm: false,
          closeOnCancel: false
        }, function(isConfirm) {
          if (isConfirm) {
            swal("Great!", "Your game will begin shortly.", "success");
            socket.emit('reEnterLobby', player);
          } else {
            swal("Aww.", "We will see you again. Because you can't leave...", "error");
          }
        });
      });

      function setPoints(pointsArr) {
        $('#bluePoints').empty().html(pointsArr["blue"]);
        $('#redPoints').empty().html(pointsArr["red"]);
        $('#whitePoints').empty().html(pointsArr["white"]);
        $('#goldPoints').empty().html(pointsArr["gold"]);
      }

      function setPieces(arr) {
        $('#bluePieces').empty().html(arr["blue"]);
        $('#redPieces').empty().html(arr["red"]);
        $('#whitePieces').empty().html(arr["white"]);
        $('#goldPieces').empty().html(arr["gold"]);
      }

      socket.on('player', function(playerType, pointsArr) {
        player = playerType; // Sets the player
        if (player == null) {
          $("#whoYouAre").html("You are a spectator. ");
        } else {
          $("#whoYouAre").html("You are player " + player);
        }
        setPoints(JSON.parse(pointsArr));
      });

      socket.on('startMessage', function() {
        sweetAlert("New Game", "A new game has started!", "success");
      });

      socket.on('updateGameState', function(firstTurn, points, pieces) {
        pointsArr = JSON.parse(points);
        piecesArr = JSON.parse(pieces);
        turn = firstTurn;
        playerPoints = pointsArr[turn];
        if (turn == player) {
          $("#whosTurn").html("It is your turn.");
        } else {
          $("#whosTurn").html("It is player " + turn + "'s turn.");
        }
        setPoints(pointsArr);
        setPieces(piecesArr);
      });

      socket.on('newTurn', function(newTurn) {
        if (selectedLink != null) {
          selectedLink.removeClass('selectedPiece');
        }
        if (newTurn === player) {
          alertify.success("It is your turn!");
        }
      });

      /* Socket listener for you lose */

      socket.on('killedPlayers', function(killedPlayers) {
        var killedPlayers = JSON.parse(killedPlayers);
        if (killedPlayers.indexOf(player) != -1 && !notifiedOfDeath) {
          sweetAlert("Oops...", "You lost! Better luck next time", "error");
          notifiedOfDeath = true;
        }
      });

      /* Socket listener for you win */
      socket.on('youWin', function(player) {
        swal({
          title: "Good Job!",
          text: "You Wrecked It!",
          type: "success",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Join new lobby?",
          cancelButtonText: "I'm out yo",
          closeOnConfirm: false,
          closeOnCancel: false
        }, function(isConfirm) {
          if (isConfirm) {
            swal("Great!", "You will be loaded into the next game.", "success");
            socket.emit('reEnterLobby', player);
          } else {
            swal("Aww.", "We will see you again. Because you can't leave...", "error");
          }
        });

      });

      /* Socket listener for stalemate */
      socket.on("stalemate", function(winner) {
        if (player == winner) {
          swal("Yay!", "You won on the stalemate technicality", "success");
        } else if (!notifiedOfDeath){
          swal("GG!", "You lost in a stalemate... I'm so proud of you", "error");
        }
      });

      var moveKey = 0;

      /******************
      * Messaging code *
      ******************/
      /* Sends the message in the message input box to the server */
      function sendMessage() {
        var messagePacket = {msg: $('#m').val(), username: player};
        socket.emit('chat message', JSON.stringify(messagePacket));
        $('#m').val('');
      }

      /* Socket listener for incoming message */
      socket.on('chat message', function(response) {
        var messagePacket = JSON.parse(response);
        $('#messages').append("<tr><th>" + messagePacket.username + "</th><td style='word-break:break-all;'>" + messagePacket.msg + "</td></tr>");
        $('.scrollableTable').animate({ scrollTop:  $('.scrollableTable').scrollTop() + 250 }, 'slow');
      });

      /* Event Listener for clear button */
      $('#clearButton').click(function (e) {
        $('#messages').fadeOut(400, function() {
          $('#messages').empty().fadeIn();
        });
      });

      /* Event Listener for submit button */
      $('#submitbtn').click(function(){
        if ($('#m').val().trim() != "") {
          sendMessage();
        }
      });

      /* Event Listener for enter key to submit message */
      $('#m').keypress(function (e) {
        if (e.which == 13) {
          if ($('#m').val().trim() != "") {
            sendMessage();
          }
        }
      });

      socket.on('pieceSelected', function(msg) {

        if (selectedLink != null) {
          selectedLink.removeClass('selectedPiece');
        }

        var absoluteCoordinates = JSON.parse(msg);
        var relativeCoordinates = rotateCoordinates(absoluteCoordinates, offsets[player]);
        selectedLink = $('#' + relativeCoordinates[0] + '-' + relativeCoordinates[1]).children()
        selectedLink.addClass('selectedPiece');
      });

      /* Making a selection or move */
      $('table').on("click", ".location", function() {
        var tempSrc = $(this).attr('id').split("-"); // [x, y]
        tempSrc = [parseInt(tempSrc[0]), parseInt(tempSrc[1])];
        var pieceAtSpot = getPiece(tempSrc);
        if (canSelect(pieceAtSpot)) { // Selecting a piece

          if (hasSelectedPiece === true) {
            selectedLink.removeClass("selectedPiece");
          }

          src = tempSrc;
          selectedPiece = pieceAtSpot; // Get Piece from Board
          hasSelectedPiece = true;
          selectedLink = $(this).children();
          selectedLink.addClass("selectedPiece");
          socket.emit('pieceSelected', JSON.stringify(rotateCoordinates(src, (4-offsets[player]) % 4)));

        } else if (hasSelectedPiece) { // Executing a move

          var dest = tempSrc;
          var move_status = canMove(selectedPiece, src, dest);
          var moveBackwards = movedBackwards(selectedPiece, src, dest);

          if (move_status !== -1) { // we are at least moving

            // Create New Board Object
            board[dest[0]][dest[1]] = selectedPiece;
            board[src[0]][src[1]] = null;

            if (move_status === 1) { // Jump move
              var midX = (src[0] + dest[0])/2;
              var midY = (src[1] + dest[1])/2;
              var capturedPiece = getPiece([midX, midY]);
              socket.emit('pieceCaptured', capturedPiece.team);
              board[midX][midY] = null;
              src = dest;
              if (capturedPiece.isKing) {
                moveKey += 3;
              } else {
                moveKey += 2;
              }
            } else if (move_status === 0) {//move
              hasSelectedPiece = false; //turn has to be over
            }

            if (canKing(selectedPiece, dest)) {
              selectedPiece.isKing = true;
            }

            if (moveBackwards && !selectedPiece.isKing) {
              moveKey += -1;
            }

            hasMoved = true;
            drawboard(board);
            for (var b = 0; b < (4 - offsets[player]) % 4; b++) {
              board = rotateClockwise(board);
            }
            socket.emit('refreshBoard', JSON.stringify(board), moveKey);
            socket.emit('pieceSelected', JSON.stringify(rotateCoordinates(src, (4-offsets[player]) % 4)));
            moveKey = 0;
          }
        }

      //Default points in bank for everybody is 2
      //Any non-king move backwards is -1
      //Any capture is 2
      //Any king capture is 3
      });

      $('body').keypress(function(e) {
        if (e.keyCode == 32 && hasMoved) {//can end turn
          endTurn();
          socket.emit('turnEnded', JSON.stringify(board));
          selectedLink.removeClass('selectedPiece');
          //switch whose turn it is
        }
      });
      
    script(src='/js/bootstrap.js')