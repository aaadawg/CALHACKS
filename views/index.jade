doctype html
html(lang='en')
  head
    meta(charset='utf-8')   
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    meta(name='description', content='Online Checkers')
    meta(name='author', content='Rohit Lalchandani, Pranay Kumar, Anish Balaji, Brennen Nelson')

    title CalHacks Checkers

    link(href='css/bootstrap-hero.min.css', rel='stylesheet')
    link(href='css/checkers.css', rel='stylesheet')
    link(rel='stylesheet', type='text/css', href='css/sweetalert.css')
    link(rel='stylesheet' type='text/css' href='css/animate.min.css')

  body
    // Main container
    .container-fluid
      .row
        .col-md-6
          table#gameBoard(cellpadding='0', cellspacing='0')
        .col-md-6
          .col-sm-1
          .col-sm-11
            .row.messagesRow0
              .col-sm-12
                h4 Message Feed

            .row.scrollableTable
              .col-sm-12
                table.table.table-striped.messagesRow0
                  thead
                    tr
                      th User              
                      th Message     
                  tbody#messages

            br
           
            .row.messagesRow0
              .col-sm-7
                input#m.form-control(type='text', autofocus='', placeholder='Send a message') 
              .col-sm-3
                button#submitbtn.btn.btn-primary(type='submit') Send Message

            br

            .row
              .col-sm-6
                ul(class='nav nav-pills' role='tablist')
                  li(class='active' role="presentation")
                    a(href="#info" role="tab" data-toggle="tab") Game Information
                  li(role="presentation")
                    a(href="#rules" role="tab" data-toggle="tab" id="rulesTab") Rules
            
            br

            .tab-content(id="myTabContent")
              div(class="tab-pane fade in active" id="info")
                .panel.panel-default.tabDiv
                  .panel-body
                    h5#whosTurn
                    h5#whoYouAre
                    h5#allPoints
              div(class="tab-pane fade in" id="rules")
                .panel.panel-default.tabDiv(id="rulesDiv")
                  .panel-body
                    p
                      | Welcome to ______________________! </br></br>
                      | You are probably wondering why you are here? We are also wondering the same thing. Well, now that we have you, I want to play a game... ;) </br></br>
                      | In this game you will be be pitted against 3 other idiots in a battle of wits, skill, and assss. </br></br>
                      | The rules are simple.. kinda: </br></br>
                      | You are playing checkers but you can move and capture forward, left, right, and backward. However moving Backwards will cost you a swag point. You will notice the point tally in the box under the board. These are points that you will use to move a normal piece backwards. You start off with two but can gain more by capturing enemy pieces. Swag points will also break ties in the case of a stalemate. A stalemate occurs if no captures occur in 30 moves. If you move a piece to the other side of the board, that piece will be kinged and can also move and capture diagonally. Thats about it. Feel free to smack talk your oppenents, the more profane the better!


    script(src='https://cdn.socket.io/socket.io-1.2.0.js')
    script(src='js/sweetalert.min.js')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js')
    script(src='//code.jquery.com/ui/1.11.4/jquery-ui.js')
    script(src='js/logic.js')
    script(src='js/janimate.js')
    script.

      $('.messagesRow1').hide();
      $('.messagesRow2').hide();

      $(document).ready(function () {
        $('#gameBoard').jAnimate("bounceInUp");
      });

      $('.messagesRow0').jAnimate('fadeInRight');
      setTimeout(function() { $('.messagesRow1').show(); $('.messagesRow1').jAnimate('fadeInRight'); }, 200);
      setTimeout(function() { $('.messagesRow2').show(); $('.messagesRow2').jAnimate('fadeInRight'); }, 300);

      $('#rulesTab').on('click', function() {
        $('#rulesDiv').animate({ scrollTop:  $('#rulesDiv').scrollTop() + 220 }, 20000, "linear");
      });

    script.

      var board; // JS Object representing board
      var hasMoved = false; // If you have moved
      var player; // Which player you are
      var turn; // WHO turn it is
      var playerPoints;
      var selectedPiece; // JS Object of selected
      var src; // Coordinates of selected piece
      var hasSelectedPiece = false; // If a piece has been selected
      var socket = io(); // Create a new socket for this user
      var offsets = {"gold": 0, "white": 1, "blue": 2, "red": 3}; // offset for rotation amounts for each client
      
      // Recieving board from server
      socket.on('board', function(boardJSON) {
        board = JSON.parse(boardJSON);
        for (var a = 0; a < offsets[player]; a++) {
          console.log("rotating");
          board = rotateClockwise(board);
        }
        drawboard(board);
      });

      socket.on('player', function(playerType, pointsArr) {
        pointsArr = JSON.parse(pointsArr);
        player = playerType;
        $("#whoYouAre").html("You are player " + player);
        $("#allPoints").empty();
        for (var key in pointsArr) {
          $("#allPoints").append(key + "'s points: " + pointsArr[key] + ". ");
        }
      });

      socket.on('startGame', function(firstTurn, points) {
        points = JSON.parse(points);
        turn = firstTurn;
        playerPoints = points[turn];
        $("#whosTurn").html("It is player " + turn + "'s turn.");
        $("#allPoints").empty();
        for (var key in points) {
          $("#allPoints").append(key + "'s points: " + points[key] + ". ");
        }
      });

      /* Socket listener for you lose */
      socket.on('youLost', function(player) {
        $("#yourPoints").html("You have zero pieces left. You lost!");
      });

      var moveKey = 0;

      /******************
      * Messaging code *
      ******************/
      /* Sends the message in the message input box to the server */
      function sendMessage() {
        var messagePacket = {msg: $('#m').val(), username: player};
        socket.emit('chat message', JSON.stringify(messagePacket));
        $('#m').val('');
      }

      /* Socket listener for incoming message */
      socket.on('chat message', function(response) {
        var messagePacket = JSON.parse(response);
        $('#messages').append("<tr><th>" + messagePacket.username + "</th><td style='word-break:break-all;'>" + messagePacket.msg + "</td></tr>");
        $('.scrollableTable').animate({ scrollTop:  $('.scrollableTable').scrollTop() + 250 }, 'slow');
      });

      /* Event Listener for clear button */
      $('#clearButton').click(function (e) {
        $('#messages').fadeOut(400, function() {
          $('#messages').empty().fadeIn();
        });
      });

      /* Event Listener for submit button */
      $('#submitbtn').click(function(){
        if ($('#m').val().trim() != "") {
          sendMessage();
        }
      });

      /* Event Listener for enter key to submit message */
      $('#m').keypress(function (e) {
        if (e.which == 13) {
          if ($('#m').val().trim() != "") {
            sendMessage();
          }
        }
      });

      /* Making a selection or move */
      $('table').on("click", ".location",function() {
        var tempSrc = $(this).attr('id').split("-"); // [x, y]
        tempSrc = [parseInt(tempSrc[0]), parseInt(tempSrc[1])];
        var pieceAtSpot = getPiece(tempSrc);
        if (canSelect(pieceAtSpot)) { // Selecting a piece
          src = tempSrc;
          selectedPiece = pieceAtSpot; // Get Piece from Board
          hasSelectedPiece = true;
        } else if (hasSelectedPiece) { // Executing a move

          var dest = tempSrc;
          var move_status = canMove(selectedPiece, src, dest);
          var moveBackwards = movedBackwards(selectedPiece, src, dest);

          console.log("backwards " + movedBackwards(selectedPiece, src, dest));
          console.log("moveStatus " + move_status);

          if (move_status !== -1) { // we are at least moving

            // Create New Board Object
            board[dest[0]][dest[1]] = selectedPiece;
            board[src[0]][src[1]] = null;

            if (move_status === 1) { //capture
              var midX = (src[0] + dest[0])/2;
              var midY = (src[1] + dest[1])/2;
              var capturedPiece = getPiece([midX, midY]);
              socket.emit('pieceCaptured', capturedPiece.team);
              board[midX][midY] = null;
              src = dest;
              if (selectedPiece.isKing) {
                moveKey += 3;
              } else {
                moveKey += 2;
              }
            } else if (move_status === 0) {//move
              hasSelectedPiece = false; //turn has to be over
            }

            if (canKing(selectedPiece, dest)) {
              selectedPiece.isKing = true;
            }

            if (moveBackwards && !selectedPiece.isKing) {
              moveKey -= 1;
            }

            hasMoved = true;
            drawboard(board);
            for (var b = 0; b < (4 - offsets[player]) % 4; b++) {
              board = rotateClockwise(board);
            }
            socket.emit('refreshBoard', JSON.stringify(board), moveKey);
          }
        }

      //Default points in bank for everybody is 2
      //Any non-king move backwards is -1
      //Any capture is 2
      //Any king capture is 3
      });

      $('body').keypress(function(e) {
        if (e.keyCode == 32 && hasMoved) {//can end turn
          endTurn();
          socket.emit('turnEnded', JSON.stringify(board));
          //switch whose turn it is
        }
      });
      
    script(src='/js/bootstrap.js')